=head1 DateTimeX::Mashup::Shiras

A Moose role with four date attributes

=head1 SYNOPSIS
    
	package MyPackage;
	use Moose;
	use MooseX::HasDefaults::RO;
	with 'DateTimeX::Mashup::Shiras';
	no Moose;
	__PACKAGE__->meta->make_immutable;

	#!perl
	my  $firstinst = MyPackage->new( 
			'date_one' => '8/26/00',
		);
	print $firstinst->get_date_one->format_cldr( "yyyy-MMMM-d" ) . "\n";
	print $firstinst->get_date_one_wkend->ymd( '' ) . "\n";
	print $firstinst->get_date_one_wkstart->ymd( '' ) . "\n";
	print $firstinst->set_date_three( '11-September-2001' ) . "\n";
	print $firstinst->get_date_three_wkstart->dmy( '' ) . "\n";
	print $firstinst->set_date_one( -1299767400 ) . "\n";
	print $firstinst->set_date_one( 36764.54167 ) . "\n";
	print $firstinst->set_date_one( 0 ) . "\n";
	print $firstinst->set_date_one( 60 ) . "\n";
    
	#######################################
	#     Output of SYNOPSIS
	# 01:2000-August-26
	# 02:20000901
	# 03:20000826
	# 04:2001-09-11T00:00:00
	# 05:08092001
	# 06:1928-10-26T09:30:00
	# 07:2000-08-26T13:00:00
	# 09:1970-01-01T00:00:00
	# 09:1970-01-01T00:01:00
	#######################################
    
=head1 DESCRIPTION

L<Shiras|http://en.wikipedia.org/wiki/Moose#Subspecies> - A small subspecies of 
Moose found in the western United States.

This is a Moose Role (L<Moose::Manual::Roles>) that 
has four flexible date attributes and some additional date functionality.  This 
role can add some date attributes to your class with built in date handling.  It 
also provides the traditional today, now, and weekend date calculation for a given 
day.

The flexibility of input for the dates comes from three different DateTime::Format 
packages using type coersion.  The three modules are; L<DateTime::Format::Flexible>.  
L<DateTime::Format::Epoch>, and L<DateTimeX::Format::Excel>.  
The choice between them is managed by L<DateTimeX::Mashup::Shiras::Types> as a type 
coersion.  This means that all input strings are parsed by ::Format::Flexible.  All 
numbers are parsed either by ::Format::Excel or by ::Format::Epoch.  See the type 
package for the details and corner cases.  Since all the succesful date 'getters' 
return DateTime objects, all the L<DateTime> methods can be applied directly.  
ex. $inst-E<gt>get_today_wkend-E<gt>ymd( "/" ). 

=head2 Attributes

Attributes listed here can be passed to -E<gt>new as listed below.

=head3 (date_one|date_two|date_three|date_four)

=over

B<Definition:> these are date attributes set to the type 'datetimedate'.  
See the L<Type|DateTimeX::Mashup::Shiras::Types> Class for more details.

B<Default> empty

B<Range> epoch numbers, DateTime definition HashRefs, Date Epoch ArrayRefs, and 
human readable strings

=back

=head3 week_end

=over

B<Definition:> This holds the definition of the last day of the week

B<Default> 'Friday'

B<Range> This will accept either day names, day abbreviations 
(no periods), or day integers (1 = Monday, 7 = Sunday )

=back

=head2 Methods

Methods are used to manipulate both the public and private attributes of this role.  
All attributes are set as 'ro' so other than ->new(  ) these methods are the only way 
to change or clear attributes.  See L<Moose::Manual::Roles> for generic implementation 
instructions.

=head3 set_(date_one|date_two|date_three|date_four)( $date )

=over

B<Definition:> This is the way to change (or set) the various dates.  

B<Accepts:> Any $date data that can be coerced by L<supported ::Format
|/DESCRIPTION> modules.

B<Returns:> the equivalent DateTime object

=back

=head3 get_(date_one|date_two|date_three|date_four|today|now)->format_command( 'format' )

=over

B<Definition:> This is how you can call various dates and format their 
output.  example $self->get_date_two->ymd( "-" ).  For this example 
the date_two attribute had been previously set.  B<Note:> 'today' and 'now' 
are special attribute cases and do not need to be defined to be retrieved.

B<Returns:> a DateTime object

=back

=head3 get_(date_one|date_two|date_three|date_four|today)_(wkend|wkstart)

=over

B<Definition:> This is a way to call the equivalent start and end of the 
week definded by the given 'week_end' attribute value.  'now' is not included 
in this list.

B<Returns:> a DateTime object

=back

=head1 GLOBAL VARIABLES

=head2 $ENV{Smart_Comments}

The module uses L<Smart::Comments> if the '-ENV' option is set.  The 'use' is 
encapsulated in an if block triggered by an environmental variable to comfort 
non-believers.  Setting the variable $ENV{Smart_Comments} in a BEGIN block will 
load and turn on smart comment reporting.  There are three levels of 'Smartness' 
available in this module '###',  '####', and '#####'.

=head1 SUPPORT

L<github DateTimeX-Mashup-Shiras/issues|https://github.com/jandrew/DateTimeX-Mashup-Shiras/issues>

=head1 TODO

=over

B<1.> Add L<Log::Shiras|https://github.com/jandrew/Log-Shiras> debugging in exchange for
L<Smart::Comments>

=over

* Get Log::Shiras CPAN ready first (Still some deep recursion issues)

=back

=back

=head1 AUTHOR

=over

=item Jed Lund

=item jandrew@cpan.org

=back

=head1 COPYRIGHT

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

This software is copyrighted (c) 2013, 2014 by Jed Lund.

=head1 DEPENDENCIES

=over

B<5.010> - (L<perl>)

L<version>

L<Moose::Role>

L<Type::Tiny>

L<DateTimeX::Mashup::Shiras::Types>

=over

B<includes depenencies to>

=over

L<DateTime|https://metacpan.org/module/DateTime>

L<DateTime::Format::Epoch|https://metacpan.org/module/DateTime::Format::Epoch>

L<DateTime::Format::Excel|https://metacpan.org/module/DateTime::Format::Excel>

L<DateTime::Format::Flexible|https://metacpan.org/module/DateTime::Format::Flexible>

=back

=back

=back

=head1 SEE ALSO

=over

L<Time::Piece>

L<MooseX::Types::Perl>

L<Date::Parse>

L<Date::Manip::Date>

L<DateTimeX::Format>

=back

=head1 Build/Install from Source

=over
	
B<1.> Download a compressed file with the code
	
B<2.> Extract the code from the compressed file.  If you are using tar this should work:

        tar -zxvf DateTimeX-Mashup-Shiras-v0.xx.tar.gz

B<3.> Change (cd) into the extracted directory

=back

(For Windows find what version of make was used to compile your perl)

	perl  -V:make

Then
(for Windows substitute the correct make function (s/make/dmake/g)?)

	>perl Makefile.PL

	>make

	>make test

	>make install # As sudo/root

	>make clean
	
=cut